---
import ComposersPage from "../components/ComposersPage.jsx";
---
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Composers results - Archive of Soviet Trumpet Music</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/styles/composers.css">
      <style>
    :root { --accent:#8b0000; --muted:#6b7280; --bg:#f7f9fc; }
      <!-- Mobile panel script moved to /composers-results.inline.1.js to avoid SSR parsing -->
    padding: 16px;
    position: fixed;
    z-index: 1300;
    box-shadow: 0 -6px 18px rgba(0,0,0,0.08);
    font-size: 15px;
  }
  /* Toggle button - only show on mobile */
  .mobile-toggle { display: none; border:0; background:transparent; font-size:16px; cursor:pointer; padding:6px 8px; }
  /* On small screens make the mobile panel a right-side sliding panel matching the filter width (270px) */
      @media (max-width: 600px) {
    #mobileSidePanel {
      display: block;
      /* span the full viewport vertically */
      top: 0; /* extend to very top */
      bottom: 0; /* extend to very bottom */
      right: 0;
      left: auto;
  /* extend to 60px from the left edge on small screens */
  width: calc(100vw - 60px);
  max-width: 92%;
      /* match filter panel styling */
      background: #f9fafb;
      /* include safe-area padding so content doesn't collide with device insets */
      padding: calc(20px + env(safe-area-inset-top, 0px)) 20px calc(20px + env(safe-area-inset-bottom, 0px));
      border-left: 1px solid #e5e7eb;
      border-top: none;
      /* rounded left corners, subtle shadow like filter panel */
      border-radius: 8px 0 0 8px;
      box-shadow: 0 6px 12px rgba(15,23,42,0.06);
      overflow: auto;
      z-index: 2200;
      font-family: Inter, system-ui, sans-serif;
  height: 100vh; /* ensure it fills the viewport */
  left: auto; right: 0; transform: translateX(0);
    }
    .mobile-toggle { display: inline-block; }
  }
  #bg-overlay img { position:absolute; left:0; top:0; width:100vw; height:100vh; object-fit:cover; will-change:left,top,width,height; pointer-events:none; }
  .search-panel, .search-panel.fixed, .search-cta, .search-input, .cta-row a, .lang-btn, .lang-dropdown, .filters select, .small-btn, .reset-btn { position:relative; z-index:2000; pointer-events:auto; }
    </style>
  </head>
  <body>
    <!-- background overlay removed -->
  <header style="position:fixed;left:0;right:0;top:0;z-index:1500;background:white;">
    <div class="container nav" style="display:flex;justify-content:space-between;align-items:center">
      <div class="logo">
        <a href="/composers" aria-label="Back to composers" title="Back to composers">
          <span class="nav-english" id="navEnglish">Archive of Soviet Trumpet Music</span>
          <span class="nav-pipe">|</span>
          <span class="nav-russian" id="navRussian" lang="ru" style="font-family: 'Segoe UI', 'Noto Sans', Arial, sans-serif;">Архив советской трубной музыки</span>
        </a>
      </div>
      <div class="lang-toggle" id="langToggle">
        <button class="lang-btn" id="langBtn">EN ▾</button>
        <div class="lang-dropdown" id="langDropdown">
          <div class="lang-option" data-locale="en">English</div>
          <div class="lang-option" data-locale="de">Deutsch</div>
        </div>
      </div>
      <!-- Mobile panel toggle (moved from composers.astro) -->
      <div style="display:inline-block; margin-left:8px;">
        <button id="togglePanelBtn" class="mobile-toggle" aria-label="Open mobile panel">☰</button>
      </div>
    </div>
  </header>
  <!-- Mobile topbar: simple white bar with left-aligned title for small screens -->
  <div class="mobile-topbar" aria-hidden="true">
    <div class="mobile-topbar-inner">
      <div class="mobile-title">Archive of Soviet Trumpet Music</div>
    </div>
  </div>
  <script src="/composers-results.inline.1.js" defer></script>
    <!-- fixed translucent search strip centered under the navbar (flush with nav) -->
    <div class="search-strip" aria-hidden="false">
      <div class="search-center">
        <input id="qinput" type="text" placeholder="Search composers, countries, or pieces..." />
        <button id="qbtn">Search</button>
      </div>
    </div>
    <!-- three horizontal panels, 20px below the search strip -->
    <div class="three-panels" role="region" aria-label="Quick panels">
      <aside class="panel filter-panel" id="panel-left">
        <h3 class="filter-title">Filters</h3>

        <div class="filter-box">

          <!-- COUNTRY -->
          <div class="filter-group" data-group="country">
            <div class="filter-header">
              <h4>Country</h4>
              <div class="filter-actions"></div>
            </div>
            <div class="filter-options" id="filter-country">
              <label><input type="checkbox" name="country" value="Russia" data-val="Russia"> Russia</label>
              <label><input type="checkbox" name="country" value="Ukraine" data-val="Ukraine"> Ukraine</label>
              <label><input type="checkbox" name="country" value="Belarus" data-val="Belarus"> Belarus</label>
              <label><input type="checkbox" name="country" value="Armenia" data-val="Armenia"> Armenia</label>
              <label><input type="checkbox" name="country" value="Georgia" data-val="Georgia"> Georgia</label>
              <label><input type="checkbox" name="country" value="Latvia" data-val="Latvia"> Latvia</label>
              <label><input type="checkbox" name="country" value="Estonia" data-val="Estonia"> Estonia</label>
              <label><input type="checkbox" name="country" value="Lithuania" data-val="Lithuania"> Lithuania</label>
              <label><input type="checkbox" name="country" value="Kazakhstan" data-val="Kazakhstan"> Kazakhstan</label>
              <label><input type="checkbox" name="country" value="Uzbekistan" data-val="Uzbekistan"> Uzbekistan</label>
              <label><input type="checkbox" name="country" value="Other" data-val="Other"> Other</label>
            </div>
                 <div class="filter-actions">
                   <button class="small-action select-all">Select all</button>
                   <button class="small-action clear-all">Clear all</button>
                 </div>
          </div>

          <!-- REPUBLIC -->
          <div class="filter-group" data-group="republic">
            <div class="filter-header">
              <h4>Soviet Republic</h4>
              <div class="filter-actions"></div>
            </div>
            <div class="filter-options" id="filter-republic">
              <label><input type="checkbox" name="republic" value="Russian SFSR" data-val="Russian SFSR"> Russian SFSR</label>
              <label><input type="checkbox" name="republic" value="Ukrainian SSR" data-val="Ukrainian SSR"> Ukrainian SSR</label>
              <label><input type="checkbox" name="republic" value="Byelorussian SSR" data-val="Byelorussian SSR"> Byelorussian SSR</label>
              <label><input type="checkbox" name="republic" value="Armenian SSR" data-val="Armenian SSR"> Armenian SSR</label>
              <label><input type="checkbox" name="republic" value="Georgian SSR" data-val="Georgian SSR"> Georgian SSR</label>
              <label><input type="checkbox" name="republic" value="Latvian SSR" data-val="Latvian SSR"> Latvian SSR</label>
              <label><input type="checkbox" name="republic" value="Estonian SSR" data-val="Estonian SSR"> Estonian SSR</label>
              <label><input type="checkbox" name="republic" value="Lithuanian SSR" data-val="Lithuanian SSR"> Lithuanian SSR</label>
              <label><input type="checkbox" name="republic" value="Kazakh SSR" data-val="Kazakh SSR"> Kazakh SSR</label>
              <label><input type="checkbox" name="republic" value="Uzbek SSR" data-val="Uzbek SSR"> Uzbek SSR</label>
              <label><input type="checkbox" name="republic" value="North Ossetian ASSR" data-val="North Ossetian ASSR"> North Ossetian ASSR</label>
              <label><input type="checkbox" name="republic" value="Chuvash ASSR" data-val="Chuvash ASSR"> Chuvash ASSR</label>
              <label><input type="checkbox" name="republic" value="Mari ASSR" data-val="Mari ASSR"> Mari ASSR</label>
              <label><input type="checkbox" name="republic" value="Tartar ASSR" data-val="Tartar ASSR"> Tartar ASSR</label>
              <label><input type="checkbox" name="republic" value="Tuvan ASSR" data-val="Tuvan ASSR"> Tuvan ASSR</label>
              <label><input type="checkbox" name="republic" value="Other" data-val="Other"> Other</label>
            </div>
          
                <div class="filter-actions">
                   <button class="small-action select-all">Select all</button>
                   <button class="small-action clear-all">Clear all</button>
                 </div>
          </div>

          <!-- DECADE -->
          <div class="filter-group" data-group="decade">
            <div class="filter-header">
              <h4>Decade</h4>
              <div class="filter-actions"></div>
            </div>
            <div class="filter-options" id="filter-decade">
              <label><input type="checkbox" name="decade" value="1920s" data-val="1920s"> 1920s</label>
              <label><input type="checkbox" name="decade" value="1930s" data-val="1930s"> 1930s</label>
              <label><input type="checkbox" name="decade" value="1940s" data-val="1940s"> 1940s</label>
              <label><input type="checkbox" name="decade" value="1950s" data-val="1950s"> 1950s</label>
              <label><input type="checkbox" name="decade" value="1960s" data-val="1960s"> 1960s</label>
              <label><input type="checkbox" name="decade" value="1970s" data-val="1970s"> 1970s</label>
              <label><input type="checkbox" name="decade" value="1980s" data-val="1980s"> 1980s</label>
            </div>
                 <div class="filter-actions">
                   <button class="small-action select-all">Select all</button>
                   <button class="small-action clear-all">Clear all</button>
                 </div>
          </div>

          <!-- GENDER -->
          <div class="filter-group" data-group="gender">
            <div class="filter-header">
              <h4>Gender</h4>
              <div class="filter-actions"></div>
            </div>
            <div class="filter-options" id="filter-gender">
              <label><input type="checkbox" name="gender" value="Male" data-val="Male"> Male</label>
              <label><input type="checkbox" name="gender" value="Female" data-val="Female"> Female</label>
              <label><input type="checkbox" name="gender" value="Other" data-val="Other"> Other</label>
            </div>
                 <div class="filter-actions">
                   <button class="small-action select-all">Select all</button>
                   <button class="small-action clear-all">Clear all</button>
                 </div>
          </div>

          <!-- TYPE -->
          <div class="filter-group" data-group="type">
            <div class="filter-header">
              <h4>Type of Piece</h4>
              <div class="filter-actions"></div>
            </div>
            <div class="filter-options" id="filter-type">
              <label><input type="checkbox" name="type" value="Concert Piece" data-val="Concert Piece"> Concert Piece</label>
              <label><input type="checkbox" name="type" value="Concerto/Concertino" data-val="Concerto/Concertino"> Concerto/Concertino</label>
              <label><input type="checkbox" name="type" value="Fantasy/Variations" data-val="Fantasy/Variations"> Fantasy/Variations</label>
              <label><input type="checkbox" name="type" value="Poem" data-val="Poem"> Poem</label>
              <label><input type="checkbox" name="type" value="Scherzo" data-val="Scherzo"> Scherzo</label>
              <label><input type="checkbox" name="type" value="Sonata/Sonatina" data-val="Sonata/Sonatina"> Sonata/Sonatina</label>
            </div>
                 <div class="filter-actions">
                   <button class="small-action select-all">Select all</button>
                   <button class="small-action clear-all">Clear all</button>
                 </div>
          </div>

        </div>
      </aside>
  <div class="panel" id="panel-center">
        <h3 class="panel-title">Results</h3>
        <div class="panel-divider"></div>

        <div id="results-list">
          <!-- Result Card Template: client will replace placeholders with actual data -->
          <div class="result-card">
            <div class="result-main">
              <b>[A]</b>
              <div class="meta">[J] ([K])</div>
            </div>
            <div class="result-right">
              <button type="button" class="about-label">About this composer</button>
              <button class="more-composer-btn">More from this composer</button>
            </div>
          </div>

          <div class="result-card">
            <div class="result-main">
              <b>[A]</b>
              <div class="meta">[J] ([K])</div>
            </div>
            <div class="result-right">
              <div class="about-label" aria-hidden="true">About this composer</div>
              <button class="more-composer-btn">More from this composer</button>
            </div>
          </div>

          <div class="result-card">
            <div class="result-main">
              <b>[A]</b>
              <div class="meta">[J] ([K])</div>
            </div>
            <div class="result-right">
              <div class="about-label" aria-hidden="true">About this composer</div>
              <button class="more-composer-btn">More from this composer</button>
            </div>
          </div>
        </div>

        <!-- Pagination (static template; client may replace this) -->
        <div class="pagination" style="margin-top:12px;">
          <button class="page-btn page-arrow">&lt;</button>
          <button class="page-btn" aria-current="true">1</button>
          <button class="page-btn">2</button>
          <button class="page-btn">3</button>
          <span class="page-ellipsis">…</span>
          <button class="page-btn">10</button>
          <button class="page-btn page-arrow">&gt;</button>
        </div>
      </div>
      <div class="panel" id="panel-right">
        <h3 class="panel-title">Composer information</h3>
        <div class="panel-divider"></div>
        <div id="composer-content" style="margin-top:8px">Select a result to view composer details.</div>
        <!-- Dedicated container for "More from this composer" so the client can toggle it
             without being overwritten when #composer-content is replaced. -->
        <div id="more-from-composer" style="margin-top:16px; display:none;"></div>
        <div style="margin-top:12px;">
          <button id="clear-composer" style="display:none;padding:6px 10px;border-radius:6px;border:1px solid #d1d5db;background:#fff;">Clear composer</button>
        </div>
      </div>
    </div>
    <!-- background overlay (moved to page top) -->

    <!-- Background adjustment control removed -->

    <!-- duplicate bottom search bar removed -->

    <!-- main content is now presented inside the three panels above -->

  <div id="fixed-footer" aria-hidden="false" role="contentinfo" tabindex="0" style="display:block; visibility:visible; z-index:99999; background:#8b0000; color:#fff;">
    <div class="fixed-footer-inner" style="max-width:1100px; margin:0 auto; padding:8px 20px; display:flex; justify-content:space-between; align-items:center;">
      <div class="footer-left">
        <div class="title">Archive of Soviet Trumpet Music</div>
        <div class="subtitle">Архив советской трубной музыки</div>
      </div>
      <div class="fixed-footer-center">
        <div class="links">
          <a href="/about">About</a>
          <a href="/composers">Composers</a>
        </div>
      </div>
      <div class="fixed-footer-right">
        <div class="copyright">© 2025 Archive of Soviet Trumpet Music</div>
      </div>
    </div>
  </div>

    <!-- Mobile toolbar: Filters | Hamburger menu (center) | Sources -->
    <div class="mobile-footer-toolbar" id="mobileFooterToolbar" aria-hidden="false">
      <button class="mf-btn" id="mf-filters">Filters</button>
      <button class="mf-center" id="mf-hamburger" aria-label="Menu" aria-expanded="false">☰</button>
  <!-- composers button removed -->
    </div>

    <!-- Left-edge swipe menu overlay (sliding panel) -->
    <div id="mobile-swipe-menu" class="mobile-swipe-menu" aria-hidden="true">
      <div class="swipe-inner" role="menu" aria-label="Quick menu">
        <button id="swm-close" class="swm-close">Close</button>
        <div style="padding:12px">
          <button id="swm-about" class="swm-item">About</button>
          <button id="swm-composers" class="swm-item">Composers</button>
          <button id="swm-home" class="swm-item">Home</button>
        </div>
      </div>
    </div>

  <!--
    Client runtime (heavy): /public/composers-results.client.js
    - This external script performs data fetching (/api/sheets), normalization,
      filtering, pagination, and renders the center panel items dynamically.
    - If you need to change client-side rendering logic for the center panel
      or the card layout, edit the client script (public/composers-results.client.js)
      NOT the server page. The client script will insert nodes matching the
      .result-card/.result-main/.result-right structure defined above.
  -->
  <script src="/composers-results.client.js?v=3" defer></script>
    <!-- background overlay (behind everything) -->
    <div id="bg-overlay" aria-hidden="true">
      <img id="bg-img" src="https://i.imgur.com/ZENogwV.png" alt="" />
    </div>
    <!-- Inline page scripts moved to /composers-results.inline.1.js to avoid SSR parsing -->
    
    <!-- Hydrate the React ComposersPage client-side for debugging and to enable client-only behavior -->
    <div id="composers-client-mount" style="display:none; visibility:hidden; width:0; height:0; overflow:hidden;">
      <!-- This intentionally hydrates the React component offscreen so its useEffects run -->
      <ComposersPage client:load />
    </div>
    
      <!-- Mobile side panel markup (moved from composers.astro) -->
  <div id="mobileSidePanel" aria-hidden="true" role="region" style="display:none">
        <div style="display:flex;justify-content:space-between;align-items:center">
          <div style="font-weight:700;color:var(--accent)">Composer details</div>
          <button id="closePanelBtn" aria-label="Close" style="border:0;background:transparent;font-size:18px;cursor:pointer;">✕</button>
        </div>
        <div id="mobilePanelContent" style="margin-top:12px">Select a composer to view details.</div>
      </div>

  <script is:inline>
        (function(){
          var _panelLeftPrevDisplay = null;
          var _filterBtnPrevDisabled = null;
          function showPanel(){
            try{
              // Only operate on small screens; avoid changing desktop layout
              try{ if (typeof window !== 'undefined' && window.innerWidth > 600) { console.debug && console.debug('[page] showPanel ignored on desktop'); return; } }catch(_){ }
              var p = document.getElementById('mobileSidePanel'); if(!p) return;
              // collapse left filter panel if present
              try{
                var left = document.getElementById('panel-left');
                if (left){ _panelLeftPrevDisplay = left.style.display || ''; left.style.display = 'none'; }
              }catch(_){ }
              // disable mobile filter button (mf-filters) while composer panel is open
              try{
                var fbtn = document.getElementById('mf-filters');
                if (fbtn){ _filterBtnPrevDisabled = !!fbtn.disabled; fbtn.disabled = true; fbtn.setAttribute('aria-disabled','true'); fbtn.classList && fbtn.classList.add('disabled'); }
              }catch(_){ }
              // close swipe menu if open
              try{ var sm = document.getElementById('mobile-swipe-menu'); if (sm && sm.getAttribute('aria-hidden') === 'false'){ sm.setAttribute('aria-hidden','true'); } }catch(_){ }

              p.style.display = 'block';
              // remove aria-hidden and move focus into the panel for accessibility
              try{ p.setAttribute('aria-hidden','false'); }catch(_){ }
              // When opening, attempt to copy any existing desktop composer HTML into the mobile panel
              try{
                var mobileInner = document.getElementById('composer-content-mobile-clone') || document.getElementById('mobilePanelContent');
                var desktopInner = document.getElementById('composer-content');
                if (mobileInner && desktopInner && desktopInner.innerHTML && String(desktopInner.innerHTML).trim().length > 10){
                  try{ mobileInner.innerHTML = desktopInner.innerHTML; }catch(_){ }
                }
              }catch(_){ }
              // small timeout to ensure element is visible before focusing
              setTimeout(function(){ try{ var closeBtn = document.getElementById('closePanelBtn'); if (closeBtn && typeof closeBtn.focus === 'function'){ closeBtn.focus({ preventScroll: true }); } }catch(_){ } }, 20);
              // scroll main content slightly so panel appears visually above
              window.scrollTo({ top: 0, behavior: 'smooth' });
            }catch(e){console.warn(e)}
          }
          function hidePanel(){
            try{
              var p = document.getElementById('mobileSidePanel'); if(!p) return;
              // move focus back to the toggle button before hiding to avoid aria-hidden-on-focused-element
              try{
                var tbtn = document.getElementById('togglePanelBtn');
                if (tbtn && typeof tbtn.focus === 'function'){
                  tbtn.focus({ preventScroll: true });
                }
              }catch(_){ }
              // If the panel still contains the active element, blur it to ensure it's not focused when aria-hidden is applied
              try{
                var active = document.activeElement;
                if (active && p.contains(active)){
                  try{ active.blur(); }catch(_){ }
                }
              }catch(_){ }
              // now hide and mark aria-hidden
              try{ p.setAttribute('aria-hidden','true'); }catch(_){ }
              p.style.display='none';
              // restore left filter panel display
              try{ var left = document.getElementById('panel-left'); if (left && _panelLeftPrevDisplay !== null){ left.style.display = _panelLeftPrevDisplay || ''; _panelLeftPrevDisplay = null; } }catch(_){ }
              // restore mobile filter button disabled state
              try{ var fbtn = document.getElementById('mf-filters'); if (fbtn && _filterBtnPrevDisabled !== null){ fbtn.disabled = !!_filterBtnPrevDisabled; if (!fbtn.disabled) fbtn.removeAttribute('aria-disabled'); else fbtn.setAttribute('aria-disabled','true'); fbtn.classList && fbtn.classList.remove('disabled'); _filterBtnPrevDisabled = null; } }catch(_){ }
            }catch(e){}
          }

          // Try to populate the mobile panel from a result-card element
          function populateAndShowFromCard(card){
            try{
              // This operation is mobile-only; ignore attempts on desktop to avoid collapsing panels
              try{ if (typeof window !== 'undefined' && window.innerWidth > 600) { console.debug && console.debug('[page] populateAndShowFromCard ignored on desktop'); return; } }catch(_){ }
              try{ console.debug && console.debug('[page] populateAndShowFromCard called for card:', card); }catch(_){ }
              // guard against re-entrant calls which were creating duplicate clones
              if (window.__mobilePanelPopulating) return;
              window.__mobilePanelPopulating = true;
              // Ensure there is only one mobileSidePanel in the DOM (remove accidental duplicates)
              try{
                var panels = document.querySelectorAll('#mobileSidePanel');
                if (panels && panels.length > 1){
                  for (var pi = 1; pi < panels.length; pi++){ try{ panels[pi].remove(); }catch(_){ } }
                }
              }catch(_){ }

              if(!card) return;
              var main = card.querySelector('.result-main');
              var title = '';
              try{ var b = main && main.querySelector('b'); if(b) title = (b.textContent || '').trim(); }catch(_){}

              // try to extract a composer name robustly from the card
              function extractComposerFromCard(c){
                try{
                  if (!c) return '';
                  // look for p elements that include 'Composer:' label
                  var ps = c.querySelectorAll('p');
                  for (var i=0;i<ps.length;i++){
                    try{
                      var txt = (ps[i].textContent || '').trim();
                      var m = txt.match(/Composer[:\s]*\s*(.+)/i);
                      if (m && m[1]){
                        var name = m[1].trim();
                        // strip trailing 'Published' or 'About this composer' fragments
                        name = name.replace(/\s*[Pp]ublished[:\s].*$/,'');
                        name = name.replace(/\s*About this composer.*$/i,'');
                        return name.trim();
                      }
                    }catch(_){ }
                  }
                  // fallback: look for a line that contains a comma (Lastname, Firstname)
                  var lines = (c.innerText || '').split(/[\r\n]+/).map(function(s){ return (s||'').trim(); }).filter(Boolean);
                  for (var j=0;j<lines.length;j++){
                    if (/,/.test(lines[j]) && /[A-Za-z]/.test(lines[j])) return lines[j];
                  }
                }catch(_){ }
                return '';
              }
              var composerName = '';
              try{ composerName = extractComposerFromCard(card) || ''; }catch(_){ composerName = ''; }
              try{ console.debug && console.debug('[page] extracted composer name:', composerName); }catch(_){ }

              // Prefer client helper if available. Use composerName if we have it; otherwise fall back to title.
              var nameToUse = (composerName && String(composerName).trim()) ? String(composerName).trim() : String(title || '').trim();
              if (nameToUse && window && typeof window.openComposerFromName === 'function'){
                try{ window.openComposerFromName(nameToUse, card); }catch(_){ }
              }

              // Fallback: prefer cloning the desktop right-hand panel so mobile matches desktop
              var content = document.getElementById('mobilePanelContent');
              var panelRight = document.getElementById('panel-right');
              try{
                if (panelRight && content){
                  // clone the panel-right to preserve structure, but avoid duplicate IDs
                  var clone = panelRight.cloneNode(true);
                  // remove or rename IDs inside clone that would conflict
                  try{
                    if (clone.id) clone.id = 'panel-right-mobile-clone';
                    var innerIds = ['composer-content','more-from-composer','clear-composer'];
                    innerIds.forEach(function(id){
                      var el = clone.querySelector('#'+id);
                      if (el) { el.id = id + '-mobile-clone'; }
                    });
                  }catch(_){ }
                  // remove any existing mobile clone inside the content to avoid duplicates
                  try{ var existingClone = content.querySelector('#panel-right-mobile-clone'); if (existingClone) existingClone.remove(); }catch(_){ }
                  // replace mobilePanelContent with the clone
                  content.innerHTML = '';
                  content.appendChild(clone);

                  // Defensive immediate copy: if desktop #composer-content already has populated HTML,
                  // copy it into the mobile clone right away so user doesn't see the placeholder.
                  try{
                    var desktopNowInit = document.getElementById('composer-content');
                    var mobileContentInit = document.getElementById('composer-content-mobile-clone');
                    if (desktopNowInit && mobileContentInit && desktopNowInit.innerHTML && String(desktopNowInit.innerHTML).trim().length > 10){
                      try{ mobileContentInit.innerHTML = desktopNowInit.innerHTML; }catch(_){ }
                    }
                  }catch(_){ }

                  // If the client runtime can populate the desktop composer panel, use it
      if (nameToUse && window && typeof window.populateComposerBox === 'function'){
                    try{
        try{ console.debug && console.debug('[page] invoking runtime.populateComposerBox for:', nameToUse); }catch(_){ }
        window.selectedComposer = nameToUse;
        // call runtime to populate the desktop panel; it will fill #composer-content
        window.populateComposerBox(nameToUse, null);
                          // also try the canonical helper if present (some runtimes populate via this)
        try{ if (typeof window.openComposerFromName === 'function') { console.debug && console.debug('[page] also calling openComposerFromName for:', nameToUse); window.openComposerFromName(nameToUse, null); } }catch(_){ }

                      // wait for #composer-content to be populated, then copy into mobile clone
                      var waited = 0;
                      var interval = setInterval(function(){
                        try{
                          var desktopContent = document.getElementById('composer-content');
                          var mobileContent = document.getElementById('composer-content-mobile-clone');
                          if (desktopContent && desktopContent.innerHTML && String(desktopContent.innerHTML).trim().length > 10){
                            if (mobileContent) mobileContent.innerHTML = desktopContent.innerHTML;
                            // also copy 'more-from-composer' if present
                            try{ var more = document.getElementById('more-from-composer'); var moreM = document.getElementById('more-from-composer-mobile-clone'); if (more && moreM) moreM.innerHTML = more.innerHTML; }catch(_){ }
                            clearInterval(interval);
                            return;
                          }
                          waited += 100;
                          if (waited > 3000){ clearInterval(interval); }
                        }catch(_){ clearInterval(interval); }
                      }, 100);
                    }catch(e){ /* ignore runtime errors and leave clone as-is */ }
                  }

                  // Listen for an explicit composerPopulated event from the client runtime
                  try{
        var onPopulated = function(ev){
                      try{
          try{ console.debug && console.debug('[page] composerPopulated event received for:', ev && ev.detail && ev.detail.name); }catch(_){ }
                        var mobileContentNow = document.getElementById('composer-content-mobile-clone');
                        if (mobileContentNow && ev && ev.detail && ev.detail.html){
                          mobileContentNow.innerHTML = ev.detail.html;
                        } else {
                          // as a fallback, copy whatever desktop content currently exists
                          var desktopNow = document.getElementById('composer-content');
                          if (mobileContentNow && desktopNow) mobileContentNow.innerHTML = desktopNow.innerHTML;
                        }
                        // also copy 'more-from-composer'
                        try{ var more = document.getElementById('more-from-composer'); var moreM2 = document.getElementById('more-from-composer-mobile-clone'); if (more && moreM2) moreM2.innerHTML = more.innerHTML; }catch(_){ }
                      }catch(_){ }
                    };
                    document.removeEventListener('composerPopulated', onPopulated);
                    document.addEventListener('composerPopulated', onPopulated);
                    // Also expose a legacy hook if other code prefers window.onComposerPopulated
                    try{ window.onComposerPopulated = function(name){ try{ var ev2 = { detail: { name: name, html: (document.getElementById('composer-content')||{}).innerHTML || '' } }; onPopulated(ev2); }catch(_){ } }; }catch(_){ }
                  }catch(_){ }

                } else if (content){
                  if (main){ content.innerHTML = main.innerHTML; }
                  else if (title) { content.textContent = title; }
                }
              }catch(e){
                // fallback to minimal content on error
                if (content){ if (main){ content.innerHTML = main.innerHTML; } else if (title) { content.textContent = title; } }
              }
              // reset guard and show
              try{ window.__mobilePanelPopulating = false; }catch(_){ }
              showPanel();
            }catch(e){ try{ window.__mobilePanelPopulating = false; }catch(_){ } console.warn('populateFromCard failed', e); }
          }

          document.addEventListener('DOMContentLoaded', function(){
            var t = document.getElementById('togglePanelBtn'); if(t) t.addEventListener('click', function(ev){ ev.preventDefault && ev.preventDefault(); showPanel(); });
            var c = document.getElementById('closePanelBtn'); if(c) c.addEventListener('click', function(ev){ ev.preventDefault && ev.preventDefault(); hidePanel(); });

            // Delegated click handler for result cards; wire every card to open the mobile panel
            var results = document.getElementById('results-list');
            if (results){
              results.addEventListener('click', function(ev){
                try{
                  // ignore clicks on interactive controls (links/buttons) so we don't double-handle them
                  var targetButton = ev.target && ev.target.closest ? ev.target.closest('.more-composer-btn, .about-label') : null;
                  // If the click was on the specific composer buttons, treat them as triggers
                  if (targetButton){
                    try{ console.debug && console.debug('[page] composer button clicked', targetButton); }catch(_){ }
                    var cardFromBtn = targetButton.closest ? targetButton.closest('.result-card') : null;
                    if (cardFromBtn){
                      ev.preventDefault && ev.preventDefault(); ev.stopPropagation && ev.stopPropagation();
                      // Mobile behavior: show the sliding right-side panel. Desktop should populate the
                      // existing right-hand panel instead of triggering the mobile clone.
                      if (typeof window !== 'undefined' && window.innerWidth > 600){
                        // Desktop: try to call the runtime helper (preferred) or fallback to simple population
                        try{
                          var composerName = '';
                          try{
                            var link = cardFromBtn.querySelector('.composer-link[data-name]') || cardFromBtn.querySelector('.composer-link');
                            if (link) composerName = (link.getAttribute && link.getAttribute('data-name')) || (link.textContent && link.textContent.trim()) || '';
                          }catch(_){ }
                          if (!composerName){
                            try{ var p = cardFromBtn.querySelector('p'); if (p && /Composer/i.test(p.textContent || '')) composerName = p.textContent.replace(/.*Composer[:\s]*/i,'').trim(); }catch(_){ }
                          }
                          if (composerName && typeof window.openComposerFromName === 'function'){
                            try{ window.openComposerFromName(composerName, cardFromBtn); }catch(_){ }
                          } else {
                            try{ var elp = document.getElementById('panel-right'); if (elp) elp.scrollIntoView({behavior:'smooth', block:'center'}); var content = document.getElementById('composer-content'); if (content) content.textContent = composerName || ''; }catch(_){ }
                        }catch(_){ }
                        return;
                      }
                      // Mobile: proceed with mobile panel population and show
                      populateAndShowFromCard(cardFromBtn);
                      return;
                    }
                  }
                  // still ignore generic anchors, but allow clicks on card body
                  if (ev.target && ev.target.closest && ev.target.closest('a')) return;
                  var card = ev.target && ev.target.closest ? ev.target.closest('.result-card') : null;
                  if (!card) return;
                  ev.preventDefault && ev.preventDefault(); ev.stopPropagation && ev.stopPropagation();
                  try{ console.debug && console.debug('[page] result-card clicked - opening panel'); }catch(_){ }
                  // Decide behavior by viewport: desktop -> open/populate right panel; mobile -> show mobile overlay
                  if (typeof window !== 'undefined' && window.innerWidth > 600){
                    try{
                      var composerName2 = '';
                      try{ var link2 = card.querySelector('.composer-link[data-name]') || card.querySelector('.composer-link'); if (link2) composerName2 = (link2.getAttribute && link2.getAttribute('data-name')) || (link2.textContent && link2.textContent.trim()) || ''; }catch(_){ }
                      if (!composerName2){ try{ var p2 = card.querySelector('p'); if (p2 && /Composer/i.test(p2.textContent || '')) composerName2 = p2.textContent.replace(/.*Composer[:\s]*/i,'').trim(); }catch(_){ } }
                      if (composerName2 && typeof window.openComposerFromName === 'function'){ try{ window.openComposerFromName(composerName2, card); }catch(_){ } }
                      else { try{ var elp2 = document.getElementById('panel-right'); if (elp2) elp2.scrollIntoView({behavior:'smooth', block:'center'}); var content2 = document.getElementById('composer-content'); if (content2) content2.textContent = composerName2 || ''; }catch(_){ } }
                    }catch(_){ }
                  } else {
                    populateAndShowFromCard(card);
                  }
                }catch(e){ /* ignore */ }
              }, true);
            }
          });

          // expose to other scripts
          window.showMobileComposerPanel = showPanel; window.hideMobileComposerPanel = hidePanel; window.populateMobilePanelFromCard = populateAndShowFromCard;
        })();
      </script>

